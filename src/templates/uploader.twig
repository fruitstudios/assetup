{% import "uploadit/_macros" as macros %}

{% set uploader = uploader ?? false %}

{% if uploader and not uploader.hasErrors() %}

    {% set classes = [
        'uploadit--uploader',
        'uploadit--layout-' ~ uploader.layout,
        uploader.enableReorder ? 'uploadit--reorderEnabled' : null,
        uploader.customClass ? uploader.customClass : null,
    ]|filter|join(' ') %}

    {# TODO: Assets - if assets|length is greater than limit, should i remove assets?  #}

    <div id="{{ uploader.id }}" class="{{ classes }}">

        <div class="uploadit--errors uploadit--isHidden"></div>

        {% if uploader.name %}
            <input type="hidden" name="{{ uploader.name|replace({'[]': ''}) }}" value="" />
        {% endif %}

        <ul id="{{ uploader.id }}Assets" class="uploadit--assets">

            {% for asset in uploader.assets %}

                {{ macros.preview({
                    asset: asset,
                    name: uploader.name,
                    transform: uploader.transform,
                    enableReorder: uploader.enableReorder,
                    enableRemove: uploader.enableRemove,
                    preview: uploader.preview
                }) }}

            {% endfor %}

        </ul>

        <div class="uploadit--controls{{ uploader.limit and uploader.assets|length >= uploader.limit ? ' uploadit--isHidden' }}">

                <div class="uploadit--controls-inner">

                    <a href="javascript:;" class="uploadit--upload">
                       {#  {{ macros.icon({ icon: 'upload' }) }} #}
                        <span class="uploadit--label">{{ uploader.selectText }}</span>
                        {# {% if uploader.enableDropToUpload %}
                            <span class="uploadit--or">{{ 'or'|t('uploadit') }}</span>
                            <span class="uploadit--btn">{{ uploader.dropText }}</span>
                        {% endif %} #}
                    </a>

                    <input type="file" name="uploaditAssetInput" style="display:none;"{{ not uploader.limit or uploader.limit > 1 ? ' multiple' }} />

                </div>
            </div>

        <div class="uploadit--preload uploadit--isHidden"></div>

    </div>

{% else %}

    <div class="uploadit--notice">
        {% if uploader.hasErrors() %}
            <p>{{ 'Uploader Not Ready'|t('uploadit') }}</p>
            <ul class="uploadit--noticeErrors">
                {% for error in uploader.getErrors() %}
                    <li>{{ error|filter|join(', ') }}</li>
                {% endfor %}
            </ul>
        {% else %}
            <p>{{ 'Uploader Not Found'|t('uploadit') }}</p>
        {% endif %}
    </div>

{% endif %}
